import math
import matplotlib.pyplot as mt
import seaborn

seaborn.set_style('darkgrid')

# Определяем функцию
def f(x):
    return x - math.sin(2 * x)

# Определяем производную функции
def df(x):
    return 1 - 2 * math.cos(2 * x)

# Рисуем график функции, чтобы выяснить, где примерно находятся корни
x = []
i = -10
while i <= 11:
    x.append(i)  # Заполняем значения x
    i += 0.125
y = [f(i) for i in x]  # Создаем список y для всех значений x

fig, axes = mt.subplots(figsize=(10, 10))  # Уменьшим размер графика для удобства
axes.plot(x, y)
shags = []
for j in range(-10, 11):
    shags.append(j)
mt.xticks(shags)
mt.yticks(shags)
mt.show()

# Метод половинного деления
a = 0.5
b = 1
eps = 0.000001
# Считаем примерное количество итераций
n = int(math.log((b - a) / eps, math.e) / math.log(2, math.e)) + 1
x = -2
y = -2
for i in range(n):
    # Находим середину отрезка
    x = (a + b) / 2
    # Если модуль разности между краем промежутка и серединой отрезка меньше допустимой погрешности, выводим значение
    if abs(b - x) < eps:
        print("Метод половинного деления:")
        print("Корень уравнения: ", x)
        print("Значение функции в корне: ", f(x))
        break
    else:
        # Иначе, если произведение функции от начальной точки и точки середины больше нуля, то начало отрезка двигаем в середину
        # иначе край отрезка двигаем в середину
        if (f(x) * f(a)) > 0:
            a = x
        else:
            b = x

# Метод Ньютона
def newton_method(f, df, x0, eps, max_iter=1000):
    """
    Метод Ньютона для нахождения корня функции.
    :param f: Функция, корень которой ищем.
    :param df: Производная функции.
    :param x0: Начальное приближение.
    :param eps: Точность.
    :param max_iter: Максимальное количество итераций.
    :return: Найденный корень.
    """
    x = x0
    for i in range(max_iter):
        fx = f(x)
        dfx = df(x)
        if abs(fx) < eps:  # Проверяем, достигнута ли требуемая точность
            print(f"Метод Ньютона сошелся за {i} итераций.")
            return x
        if dfx == 0:  # Если производная равна нулю, метод не может продолжаться
            raise ValueError("Производная равна нулю. Метод Ньютона не может быть применен.")
        x = x - fx / dfx  # Итерационная формула Ньютона
    raise ValueError("Метод Ньютона не сошелся за указанное количество итераций.")

# Применяем метод Ньютона
try:
    x0 = 0.1  # Начальное приближение (выбираем близко к корню, который виден на графике)
    root_newton = newton_method(f, df, x0, eps)
    print("Метод Ньютона:")
    print("Корень уравнения: ", root_newton)
    print("Значение функции в корне: ", f(root_newton))
except ValueError as e:
    print(e)

